import 'dart:io';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:path_provider/path_provider.dart';
import '../../models/note.dart';

class HiveInitializer {
  static const String _notesBoxName = 'notes';
  static const String _settingsBoxName = 'settings';
  
  static bool _isInitialized = false;

  /// Initialize Hive with adapters and open required boxes
  static Future<void> init() async {
    if (_isInitialized) return;

    try {
      // Initialize Hive
      await Hive.initFlutter();

      // Register adapters
      _registerAdapters();

      // Open boxes
      await _openBoxes();

      _isInitialized = true;
      print('✅ Hive initialized successfully');
    } catch (e) {
      print('❌ Failed to initialize Hive: $e');
      rethrow;
    }
  }

  /// Register all Hive type adapters
  static void _registerAdapters() {
    // Register Note adapter (generated by hive_generator)
    if (!Hive.isAdapterRegistered(0)) {
      Hive.registerAdapter(NoteAdapter());
    }
    
    // TODO: Register other adapters as needed (Folder, etc.)
  }

  /// Open all required Hive boxes
  static Future<void> _openBoxes() async {
    await Future.wait([
      Hive.openBox<Note>(_notesBoxName),
      Hive.openBox(_settingsBoxName),
    ]);
  }

  /// Get the notes box
  static Box<Note> get notesBox {
    if (!_isInitialized) {
      throw Exception('Hive not initialized. Call HiveInitializer.init() first.');
    }
    return Hive.box<Note>(_notesBoxName);
  }

  /// Get the settings box
  static Box get settingsBox {
    if (!_isInitialized) {
      throw Exception('Hive not initialized. Call HiveInitializer.init() first.');
    }
    return Hive.box(_settingsBoxName);
  }

  /// Close all boxes and clear data (for testing)
  static Future<void> clear() async {
    if (!_isInitialized) return;

    await notesBox.clear();
    await settingsBox.clear();
  }

  /// Close all boxes (call on app termination)
  static Future<void> close() async {
    if (!_isInitialized) return;

    await Hive.close();
    _isInitialized = false;
  }

  /// Check if Hive is initialized
  static bool get isInitialized => _isInitialized;

  /// Get app documents directory for storing files
  static Future<String> getAppDocumentsPath() async {
    final directory = await getApplicationDocumentsDirectory();
    return directory.path;
  }

  /// Get notes media directory for storing images and attachments
  static Future<String> getNotesMediaPath() async {
    final documentsPath = await getAppDocumentsPath();
    final notesMediaPath = '$documentsPath/notes_media';
    
    // Create directory if it doesn't exist
    final directory = Directory(notesMediaPath);
    if (!await directory.exists()) {
      await directory.create(recursive: true);
    }
    
    return notesMediaPath;
  }

  /// Get directory for a specific note's media
  static Future<String> getNoteMediaPath(String noteId) async {
    final notesMediaPath = await getNotesMediaPath();
    final noteMediaPath = '$notesMediaPath/$noteId';
    
    // Create directory if it doesn't exist
    final directory = Directory(noteMediaPath);
    if (!await directory.exists()) {
      await directory.create(recursive: true);
    }
    
    return noteMediaPath;
  }
}